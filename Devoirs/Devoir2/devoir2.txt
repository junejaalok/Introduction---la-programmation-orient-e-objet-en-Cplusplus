Exercise 1 — Petri dish
The goal of this exercise is to simulate in a very simple way a « Petri dish » populated with « cellular organisms ».

1.1 Description
Download the source code available at the course webpage (https://d396qusza40orc.cloudfront.net/intropoocpp/assignments/petri.cc) and complete it according to the instructions below.

WARNING: you shall not modify neither the beginning nor the end of the provided file. It's thus mandatory to proceed as follows:

save the downloaded file as petri.cc or petri.cpp;

write your code between these two provided comments:

/*******************************************
 * Complétez le programme à partir d'ici.
 *******************************************/

/*******************************************
 * Ne rien modifier après cette ligne.
 *******************************************/
save and test your program to be sure that it works properly; try for instance the values used in the example given below;

upload the modified file (still named petri.cc or petri.cpp) in "OUTPUT submission" (not in "Additional"!).

The provided code creates a Petri dish and adds in it a certain number of organisms. The code prints the dish's content before and after the simulation of its "evolution".

The definitions of the classes Petri (the dish) and Cellule (the organisms) are missing and you are asked to provide them.

1.1.1 The class Cellule

A cell is characterized by:

a name (nom of type string);

a size in microns (taille of type double);

an energy level (energie of type int);

a color (couleur of type string).

Please strictly respect the names for the attributes.

The following methods are specific to this class and are part of its interface:

the constructors consistent with the provided main, with the following order of parameters: the name, the size, the energy level, and the color; the default constructor will initialize the name as "Pyrobacculum", the size as 10, the energy level as 5, and the color as "verte".

a method affiche which allows for printing the characteristics of the cell; the characteristics printed must strictly respect the following format:

<name>, taille = <size> microns, énergie = <energy>, couleur = <color>

followed by a newline;

<name> is the name of the cell, <size> its size, <energy> its energy level, and <color> its color;

a method division without parameters, allowing the cell to divide;

the method division returns a new Cellule; the new cell is a copy of the former cell; the copy will then follow a mutation of its color;

the division has an energetic cost for the former cell, which loses one energy point after division.

You will simulate the mutation of the cell very simply by changing its color (once): from "verte" it will change to "bleue", from "bleue" to "rouge", from "rouge" to "rose bonbon", from "violet" to "verte". For any other color, the mutation will simply add " fluo" to that color (without any further processing on the string). For example, if the former color is "jaune", the color after mutation will be "jaune fluo".

1.1.2 The class Petri

A Petri dish is characterized by its population: a dynamic array (vector) of Cellule. The following methods are specific to this class and part of its interface:

a method ajouter (means "add") allows to add a cell past as a parameter to the population of the Petri dish; the cell will always be added at the end of the array;

a method affiche (means "print") printing the content of the Petri dish; this method will print all the cells in the format previously described for cells (without duplicated code);

a method evolue (means "evolve") allows the population of the Petri dish to evolve; this method has no parameter and does not return anything;

making the population of the dish evolve consists of making all its cells divide (all the cells present before the call to the evolution method); the cells resulting from the division will be added to the Petri dish; always at the end of all the cells (but the new cells will not be further divided); once all the cells of the former population are divided, the cells whose energy level is less than or equal to zero should be removed; to preserve the consistency of the contents of the dish, you should not remove the cells before finishing all the divisions.

Indication

To remove the value of the position i in a vector v, you should use the following instructions:

swap(v[i], v.back());
v.pop_back();
In C++11, the function swap is located in the library utility, which we have included in the provided file.

1.2 Execution examples
Population avant évolution :
Pyrobacculum, taille = 10 microns, énergie = 5, couleur = verte
PiliIV, taille = 4 microns, énergie = 1, couleur = jaune
Population après évolution :
Pyrobacculum, taille = 10 microns, énergie = 4, couleur = verte
PiliIV, taille = 4 microns, énergie = 1, couleur = jaune fluo
Pyrobacculum, taille = 10 microns, énergie = 5, couleur = bleue
Exercise 2 — Study plan
The purpose of this exercise is to implement a number of features that allow a student to manage his weekly schedule by choosing courses from those offered by a study plan.

Each course consists of activities (ex-cathedra lectures and exercise sessions) that occur at the same time every week.

The program will help the student select courses from the study plan, ensuring that there is no time conflict between any of the activities.

2.1 Description
Download the source code available at the course webpage (https://d396qusza40orc.cloudfront.net/intropoocpp/assignments/cours.cc) and complete it according to the instructions below.

WARNING: you shall not modify neither the beginning nor the end of the provided file. It's thus mandatory to proceed as follows:

save the downloaded file as cours.cc or cours.cpp;

write your code between these two provided comments:

/*******************************************
 * Complétez le programme à partir d'ici.
 *******************************************/

/*******************************************
 * Ne rien modifier après cette ligne.
 *******************************************/
save and test your program to be sure that it works properly; try for instance the values used in the example given below;

upload the modified file (still named cours.cc or cours.cpp) in "OUTPUT submission" (not in "Additional"!).

The provided code offers a class Time that represents the time at which an event occurs. It stores the day of the week (of type Day) and the start time of the event, in hours (of type double). The type CourseId is also provided. Please notice that for convenience, the part of the program to be completed already contains the printing instructions involving diacritics. You will have of course to place these instructions where they must be.

The definition of the classes Activity (activity that is part of a course), Course (course), StudyPlan (study plan) and Schedule (weekly schedule) are missing and you are asked to provide them.

2.1.1 The Activity class

An activity, such as an exercise session, is characterized by:

the location where it takes place (for example a room name, of type string);

the duration, in hours (a double);

the starting time (of type Time).

The following methods are specific to this class and part of its interface:

a constructor consistent with the provided main, with the following order of parameters: the location, the day, the time and the duration;

the ‘‘getters'' getLocation, getTime and getDuration that return, respectively: the location of the activity, its starting time and its duration;

a method conflicts taking as parameter another activity. This method returns true if the current activity conflicts with the activity passed as parameter; or false otherwise. Two activities conflict if they occur on the same day and their time spans overlap. If the ending time of an activity is equal to the starting time of another activity, they do not conflict;

a method print which outputs the properties of the activity using precisely the following format:

le <time> en <location>, durée <duration>
where <time> is the start time of the activity, displayed using the format produced by the provided method Time::print(), <location> is the location where the activity takes place and <duration> its duration, displayed using the format produced by the provided function print_time.

Additionally, it must not be possible to copy a Activity.

2.1.2 The Course class

A course has the following properties:

an unique identifier (of the provided type CourseId);

a name (of type string), such as "Introduction to programming";

an activity corresponding to the weekly ex-cathedra lecture;

an activity corresponding to the weekly exercise session;

and the number of credit points it offers (an int).

The following methods are specific to this class and part of its interface:

a constructor consistent with the provided main, with the following order of parameters: the course identifier, the name, the ex-cathedra lecture activity, the exercise session activity and the number of credits. The constructor must display the message: 
‘‘Nouveau cours : <id>'', followed by a newline;

a destructor that displays the message: 
Suppression du cours : <id>

followed by a newline; id is the identifier of the course;

the ‘‘getters'' getId, getTitle and getCredits return respectively the identifier of the course, its name and its number of credits;

a method workload which returns the weekly workload of the course, computed by summing the durations of the activities;

a method conflicts taking as parameter an Activity and returning true if the activities of the course are in conflict with the activity passed as parameter; or false otherwise;

a method conflicts taking as parameter a Course. This method returns true if the activities of the course passed as parameter are in conflict with the current course; or false otherwise;

a method print which displays the properties of the course using precisely the following format: 

<id>: <nom> - cours <activite_excathedra>, exercices <activite_exercices>. crédits : <credits>

without a newline. <id> is the course identifier, <lecture_activity> is the activity associated to the ex-cathedra lecture activity, displayed using the format specified for Activity::print, <exercise_activity> is the activity associated to the exercise session, also displayed using the format specified for Activity::print and credits is the number of credit points of the course.

It must not be possible to copy courses.

2.1.3 The StudyPlan class

The class StudyPlan represents a study plan that offers a collection of courses.

It stores a dynamic array (vector) of const Course*. The following methods are specific to this class and part of its interface:

the method add_course takes as parameter a constant reference to a Course (and not a pointer to Course) and adds the course to the study plan;

the method conflicts takes as parameter a course identifier (a CourseId) and a selection of courses (given as a vector of course identifiers); this method returns true if the course identified by the first parameter is in conflict with any course in the selection; or false if there is no conflict; the method conflicts returns false if the course identified by the first parameter is not part of the study plan (none of the courses of the study plan have this identifier); the courses of the selection that are not part of the study plan are ignored;

the method print takes as parameter a course identifier and displays the course from the study plan that has this identifier; the format of the output is the one specified for Course::print; if there is no course in the study plan with the given identifier, the method print does not display anything;

the method credits takes as parameter a course identifier and returns the number of credits of the course if it is found in the study plan; otherwise, the method returns zero;

the method workload takes as parameter a course identifier and returns the weekly workload of the course if it is found in the study plan; otherwise, the method returns zero;

the method printCourseSuggestions takes as parameter a selection of courses (given as a vector of course identifiers); this method displays the collection of courses in the study plan that do not conflict with the proposed selection;

the compatible courses are displayed in the format specified for Course::print, each followed by a newline; the courses in the selection that are not found in the study plan are ignored; if there is no course in the study plan compatible with the proposed selection, the method displays the message: 
Aucun cours n'est compatible avec la sélection de cours.

To prevent encapsulation violations in your implementation, the study plan must not provide direct access to any of the Course* from the collection of courses. The destructor of StudyPlan must not delete its courses.

You should take care to modularize your code. A method that searches the course having a given identifier among the collection of courses can be useful. This method should not be part of the public interface of the class.

2.1.4 The Schedule class

The student's weekly schedule is represented by an object of type Schedule. This class is characterized by:

the collection of courses selected by the student (a vector of course identifiers);

a (constant) reference to the study plan from which the student can choose courses.

The following methods are specific to this class and part of its interface:

a constructor initializing its study plan using a constant reference to a StudyPlan passed as parameter;

the method add_course returning a boolean value and taking as parameter a course identifier; this identifier will be added to the collection of courses selected by the student if it is not in conflict with the other selected courses, in which case the identifier will be added at the end of the selection; the method add_course returns true if the course could be added to the selection or false otherwise;

the method computeDailyWorkload returns the average daily workload of the course selection; it is computed as the sum of the workloads of the courses in the selection divided by 5 (5 being the number of work days in a week);

the method computeTotalCredits returns the total number of credits offered by the course selection; it is computed as the sum of the credits of the courses in the selection;

and the method print displays the schedule using the format (see also the sample output of the program shown further below):

<course_selection>
Total de crédits   : <credits>
Charge journalière : <workload>
Suggestions :
<course_suggestions>
–
<course_selection> is the selection of courses, each displayed as specified for StudyPlan::print and followed by a newline;

–
<credits> is the number of credits of the course selection (as computed by Schedule::computeTotalCredits;

–
<charge> is the average daily workload of the course selection (as computed by Schedule::computeDailyWorkload;

–
<course_suggestions> shows the courses that can still be selected from the study plan, displayed as specified for 
StudyPlan::printCourseSuggestions.

2.2 Execution examples
The sample output below corresponds to the provided program. The character '\' is not part of the output. In the output of the program there is no newline in place of '\'.

L'activité physicsLecture a lieu le lundi à 09:15 en Central Hall,\
 durée 01:45.
L'activité historyLecture a lieu le lundi à 10:15 en North Hall,\
 durée 01:45.
physicsLecture est en conflit avec historyLecture.

Nouveau cours : PHY-101
Nouveau cours : HIS-101
Nouveau cours : ECN-214
Emploi du temps 1 :
ECN-214: Finance - cours le vendredi à 14:00 en South Hall, durée 02:00,\
 exercices le vendredi à 16:00 en Central 105, durée 01:00. crédits : 3
Total de crédits   : 3
Charge journalière : 00:36
Suggestions :
PHY-101: Physique - cours le lundi à 09:15 en Central Hall, durée 01:45,\
 exercices le lundi à 14:00 en Central 101, durée 02:00. crédits : 4
HIS-101: Histoire - cours le lundi à 10:15 en North Hall, durée 01:45,\
 exercices le mardi à 09:00 en East 201, durée 02:00. crédits : 4

Emploi du temps 2 :
ECN-214: Finance - cours le vendredi à 14:00 en South Hall, durée 02:00,\
 exercices le vendredi à 16:00 en Central 105, durée 01:00. crédits : 3
HIS-101: Histoire - cours le lundi à 10:15 en North Hall, durée 01:45,\
 exercices le mardi à 09:00 en East 201, durée 02:00. crédits : 4
Total de crédits   : 7
Charge journalière : 01:21
Suggestions :
Aucun cours n'est compatible avec la sélection de cours.

Emploi du temps 3 :
PHY-101: Physique - cours le lundi à 09:15 en Central Hall, durée 01:45,\
 exercices le lundi à 14:00 en Central 101, durée 02:00. crédits : 4
Total de crédits   : 4
Charge journalière : 00:45
Suggestions :
ECN-214: Finance - cours le vendredi à 14:00 en South Hall, durée 02:00,\
 exercices le vendredi à 16:00 en Central 105, durée 01:00. crédits : 3

Suppression du cours : ECN-214
Suppression du cours : HIS-101
Suppression du cours : PHY-101
