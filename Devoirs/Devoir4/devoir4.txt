Exercise 1 — Construction, the return
The goal of this exercise is to model a basic construction set game. Despite its topic, this exercise is very different from the previous assignment.

1.1 Description
Download the source code available at the course webpage (https://d396qusza40orc.cloudfront.net/intropoocpp/assignments/construction2.cc) and complete it according to the instructions below.

WARNING: you shall not modify neither the beginning nor the end of the provided file. It's thus mandatory to proceed as follows:

save the downloaded file as construction2.cc or construction2.cpp;

write your code between these two provided comments:

/*******************************************
 * Complétez le programme à partir d'ici.
 *******************************************/

/*******************************************
 * Ne rien modifier après cette ligne.
 *******************************************/
save and test your program to be sure that it works properly; try for instance the values used in the example given below;

upload the modified file (still named construction2.cc or construction2.cpp) in "OUTPUT submission" (not in "Additional"!).

The provided code creates a construction (made out of simple or composite parts) and prints it.

An example of a possible output for the program is provided below.

1.2 Classes to produce
A construction set is a collection of parts. Each part is characterized by a name (a string) and has a method, afficher(ostream&);, that simply prints its name, between " ; for example (see also the example of the program sequence given below) : "building block" (without the qualifier "pièce" ("part" in French) or "pièce simple" ("simple part" in French) in front. This qualifier is added only in the << operator).

There are two types of parts : simple and composite.

A simple part is characterized by its orientation (to simplify the design, a string of characters), which can be either "gauche" ("left"), "droite" ("right"), or empty when there is no particular orientation.

A composite part is characterized by the list of simple parts that the piece is made of (to simplify the design, a composite part is only made of simple ones).

You are required to code the following classes (please strictly respect the following names) : Piece (for the parts), Simple (for the simple parts) and Composee (for the composite parts). These names correspond to the previous description and the provided code.

This exercise description is somehow less detailed than in prior exercises. You should have gained a little more autonomy in the design process by now. The provided code has to compile and return the results reproduced below.

Note that a simple part without orientation does not print anything after its name.

For the composite parts, the additions to these lists will be performed at the end of the list.

You are required to code the hierarchy of classes derived from the previous description. You will avoid any duplicated code and the shadowing of attributes

An example of a possible program sequence is provided below for a construction comprised of 59 building blocks, a door, and two windows.

1.3 Execution examples
The example of the output below corresponds to the provided program.

Nous fabriquons une boîte de jeu contenant :
 59 exemplaires de pièce simple "brique standard"
 1 exemplaire de pièce "porte" composée de :
    * pièce simple "cadran porte" orienté vers la gauche
    * pièce simple "battant" orienté vers la gauche
 2 exemplaires de pièce "fenetre" composée de :
    * pièce simple "cadran fenetre"
    * pièce simple "volet" orienté vers la gauche
    * pièce simple "volet" orienté vers la droite
Exercise 2 — Clash of the titans
In this exercise, you are going to have dragons and hydras fight each other.

2.1 Description
Download the source code available at the course webpage (https://d396qusza40orc.cloudfront.net/intropoocpp/assignments/dragons.cc) and complete it according to the instructions below.

WARNING: you shall not modify neither the beginning nor the end of the provided file. It's thus mandatory to proceed as follows:

save the downloaded file as dragons.cc or dragons.cpp;

write your code between these two provided comments:

/*******************************************
 * Complétez le programme à partir d'ici.
 *******************************************/

/*******************************************
 * Ne rien modifier après cette ligne.
 *******************************************/
save and test your program to be sure that it works properly; try for instance the values used in the example given below;

upload the modified file (still named dragons.cc or dragons.cpp) in "OUTPUT submission" (not in "Additional"!).

The provided main program simulates a combat between a dragon and a hydra. The hierarchy of classes that model the creatures of this game are missing and you are asked to provide them.

2.1.1 The class Creature

A creature is characterized by:

its name (nom_, a constant string);

its level (niveau_, an integer);

its number of health points (points_de_vie_, an integer);

its force (force_, an integer);

its position (position_, also an integer; for simplicity, our game takes place in 1D).

You must use strictly these attribute names. The attributes must be accessible to classes deriving from Creature.

The methods defined for this class are:

a constructor allowing the initialization of the name, level, health points, force and position of the creature using the values passed as parameters, in this order; the constructor accepts zero as default value for the position;

a method bool vivant() (English: alive) returning true if the creature is alive (number of health points greater than zero) or false otherwise;

a method points_attaque (English: attack points) returning the number of attack points that can be inflicted by the creature to others; the value is computed as the level multiplied by the force if the creature is alive, or zero otherwise;

a method deplacer(int) (English: move), which does not return anything and adds the integer passed as parameter to the position of the creature;

a method adieux() (English: goodbye), which does not return anything and displays the message (English: <name> is no more!): <nom> n'est plus! 
using strictly this format. <nom> is the name of the creature;

a method faiblir (English: weaken), which does not return anything and substracts the number of points passed as parameter from the number of health points of the creature, if it is alive; if the creature dies, its number of health points is set to zero and the method adieux is called;

a method afficher() (English: display), which does not return anything and displays informations about the creature using strictly the following format:

<nom>, niveau: <niveau>, points de vie: <points>, force: <force>, \
points d'attaque: <attaque>, position: <position>
The character '\' is not part of the output and is not followed by a newline. <nom> is the name of the creature, <niveau> is its level, <points> is its number of health points, <force> is its force, <attaque> is its number of attack points and <position> is its position.

2.1.2 The class Dragon

A Dragon is a Creature. It has as specific characteristic the range of its flame (portee_flamme_ (English: flame range), an integer). Its specific methods are:

a constructor which initializes its name, level, number of health points, the force, the range of the flame and the position of the dragon using the values passed as parameters, in this order; the constructor accepts zero as default value for the position;

a method voler(int pos) (English: fly) which does not return anything and allows the dragon to move to the given position pos;

a method souffle_sur(Creature& bete) (English: blow on a creature) which does not return anything and simulates what happens when the dragon blows its flame towards another Creature:

(a)
if the dragon and the creature are both alive and if the creature is in range of its flame, the dragon inflicts its attack points as damage to the creature; the creature weakens by the number of attack points; The dragon also weakens; it loses d health points, with d being the distance between the dragon and the creature (the further the dragon has to blow, the more it weakens);

(b)
if after this epic fight the dragon is still alive and the creature dies, the dragon increases in level by one unit;

The creature is in the range of the flame of the dragon if the distance between them is smaller or equal to the range of the flame (you should use the function distance we provide).

2.1.3 The class Hydre

A Hydre is a Creature. It has as specific characteristics the length of its neck (longueur_cou_, an integer) and the dose of poison it can inject in an attack (dose_poison_, an integer). Its specific methods are:

a constructor which initializes its name, level, number of health points, force, the length of its neck, the poison dose and the position using the values passed as parameters, in this order; the constructor accepts zero as default value for the position;

a method empoisonne(Creature& bete) (English: poison creature) which does not return anything and simulates what happens when the hydra poisons another Creature:

(a)
if the hydra and the creature are alive and the creature is in range of the head of the hydra, then the hydra inflicts damage to the creature; the creature weakens by the number of attack points of the hydra plus its dose of poison;

(b)
if at the end of the fight the creature is no longer alive, the hydra increases in level by one unit;

The creature is ‘‘in range of the head of the hydra'' if the distance the creature and the hydra is smaller or equal to the length of the neck of the hydra (you should use the function distance we provide).

The function combat (fight) takes as parameters a dragon and a hydra. It allows:

the hydra to poison the dragon;
and the dragon to blow on the hydra.
2.2 Execution examples
The example of output below corresponds to the provided program.

Dragon rouge, niveau: 2, points de vie: 10, force: 3, points\
 d'attaque: 6, position: 0
se prépare au combat avec :
Hydre maléfique, niveau: 2, points de vie: 10, force: 1, poi\
nts d'attaque: 2, position: 42

1er combat :
    les créatures ne sont pas à portée, donc ne peuvent pas \
s'attaquer.
Après le combat :
Dragon rouge, niveau: 2, points de vie: 10, force: 3, points\
 d'attaque: 6, position: 0
Hydre maléfique, niveau: 2, points de vie: 10, force: 1, poi\
nts d'attaque: 2, position: 42

Le dragon vole à proximité de l'hydre :
Dragon rouge, niveau: 2, points de vie: 10, force: 3, points\
 d'attaque: 6, position: 41

L'hydre recule d'un pas :
Hydre maléfique, niveau: 2, points de vie: 10, force: 1, poi\
nts d'attaque: 2, position: 43

2e combat :
  + l'hydre inflige au dragon une attaque de 3 points
      [ niveau (2) * force (1) + poison (1) = 3 ] ;
  + le dragon inflige à l'hydre une attaque de 6 points
      [ niveau (2) * force (3) = 6 ] ;
  + pendant son attaque, le dragon perd 2 points de vie supp\
lémentaires
       [ correspondant à la distance entre le dragon et l'hy\
dre : 43 - 41 = 2 ].
Après le combat :
Dragon rouge, niveau: 2, points de vie: 5, force: 3, points \
d'attaque: 6, position: 41
Hydre maléfique, niveau: 2, points de vie: 4, force: 1, poin\
ts d'attaque: 2, position: 43

Le dragon avance d'un pas :
Dragon rouge, niveau: 2, points de vie: 5, force: 3, points \
d'attaque: 6, position: 42

3e combat :
  + l'hydre inflige au dragon une attaque de 3 points
      [ niveau (2) * force (1) + poison (1) = 3 ] ;
  + le dragon inflige à l'hydre une attaque de 6 points
      [ niveau (2) * force (3) = 6 ] ;
  + pendant son attaque, le dragon perd 1 point de vie suppl\
émentaire
       [ correspondant à la distance entre le dragon et l'hy\
dre : 43 - 42 = 1 ] ;
  + l'hydre est vaincue et le dragon monte au niveau 3.
Hydre maléfique n'est plus !
Après le combat :
Dragon rouge, niveau: 3, points de vie: 1, force: 3, points \
d'attaque: 9, position: 42
Hydre maléfique, niveau: 2, points de vie: 0, force: 1, poin\
ts d'attaque: 0, position: 43

4e Combat :
    quand une créature est vaincue, rien ne se passe.
Après le combat :
Dragon rouge, niveau: 3, points de vie: 1, force: 3, points \
d'attaque: 9, position: 42
Hydre maléfique, niveau: 2, points de vie: 0, force: 1, poin\
ts d'attaque: 0, position: 43
The character '\' is not part of the output and is not followed by a newline.
